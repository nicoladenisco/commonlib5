/* 
 * Copyright (C) 2025 Nicola De Nisco
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.commonlib5.gui;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.*;
import javax.swing.Timer;

/**
 * Maschera per la visualizzazione dell'errore.
 * @author Nicola De Nisco
 */
public class ErrorDialog extends javax.swing.JDialog
{
  private int rv = 0, autoCloseSeconds = 0;
  private String captionContinueButton = null;
  private Timer autoCloseTimer = null;
  public static final int CONTINUE = 1;
  public static final int ABORT = 2;

  /**
   * Creates new form ErrorDialog
   * @param modal
   */
  public ErrorDialog(Frame parent, boolean modal)
  {
    super(parent, modal);
    initComponents();
  }

  /**
   * Creates new form ErrorDialog
   * @param modal
   */
  public ErrorDialog(Dialog parent, boolean modal)
  {
    super(parent, modal);
    initComponents();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        jlContinua = new javax.swing.JLabel();
        jbContinue = new javax.swing.JButton();
        jbInterrupt = new javax.swing.JButton();
        panelMessages = new javax.swing.JPanel();
        jtError = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtStack = new javax.swing.JTextArea();
        panelTitle = new javax.swing.JPanel();
        jlTitolo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Errore nell'appllicazione");

        jlContinua.setText("Molto probabilmente l'applicazione  non può continuare.");
        buttonPanel.add(jlContinua);

        jbContinue.setText("Prova a continuare");
        jbContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbContinueActionPerformed(evt);
            }
        });
        buttonPanel.add(jbContinue);

        jbInterrupt.setText("Interrompi operazione");
        jbInterrupt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInterruptActionPerformed(evt);
            }
        });
        buttonPanel.add(jbInterrupt);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        panelMessages.setLayout(new java.awt.BorderLayout());

        jtError.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jtError.setEditable(false);
        panelMessages.add(jtError, java.awt.BorderLayout.NORTH);

        jtStack.setEditable(false);
        jtStack.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(jtStack);

        panelMessages.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelMessages, java.awt.BorderLayout.CENTER);

        jlTitolo.setFont(new java.awt.Font("Dialog", 1, 18));
        jlTitolo.setText("ERRORE GRAVE");
        panelTitle.add(jlTitolo);

        getContentPane().add(panelTitle, java.awt.BorderLayout.NORTH);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/button_cancel.png"))); // NOI18N
        getContentPane().add(jLabel2, java.awt.BorderLayout.WEST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void jbContinueActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbContinueActionPerformed
  {//GEN-HEADEREND:event_jbContinueActionPerformed
    dispose();
    rv = CONTINUE;
  }//GEN-LAST:event_jbContinueActionPerformed

  private void jbInterruptActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbInterruptActionPerformed
  {//GEN-HEADEREND:event_jbInterruptActionPerformed
    dispose();
    rv = ABORT;
  }//GEN-LAST:event_jbInterruptActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbContinue;
    private javax.swing.JButton jbInterrupt;
    private javax.swing.JLabel jlContinua;
    private javax.swing.JLabel jlTitolo;
    private javax.swing.JTextPane jtError;
    private javax.swing.JTextArea jtStack;
    private javax.swing.JPanel panelMessages;
    private javax.swing.JPanel panelTitle;
    // End of variables declaration//GEN-END:variables

  public static ErrorDialog createDialog(Container parent)
  {
    if(parent != null && parent instanceof Frame)
    {
      return new ErrorDialog((Frame) parent, true);
    }
    else if(parent != null && parent instanceof Dialog)
    {
      return new ErrorDialog((Dialog) parent, true);
    }
    else
    {
      return new ErrorDialog((Frame) null, true);
    }
  }

  private void autoCloseTick(ActionEvent evt)
  {
    jbContinue.setText(captionContinueButton + " (" + autoCloseSeconds + ")");
    if(--autoCloseSeconds <= 0)
      jbContinueActionPerformed(evt);
  }

  public static int showError(Container parent, String msg, Throwable t,
     boolean showContinue, boolean showInterrupt, int autoCloseSeconds)
  {
    ErrorDialog ed = createDialog(parent);
    CharArrayWriter cw = new CharArrayWriter();
    PrintWriter pw = new PrintWriter(cw, true);
    t.printStackTrace(pw);

    ed.jtStack.setText(cw.toString());
    ed.jtError.setText(msg);
    ed.setSize(800, 400);
    ed.jtStack.setCaretPosition(0);

    ed.jbContinue.setVisible(showContinue);
    ed.jbInterrupt.setVisible(showInterrupt);

    if(autoCloseSeconds > 0)
    {
      // predispone per autochiusura
      ed.autoCloseSeconds = autoCloseSeconds;
      ed.captionContinueButton = ed.jbContinue.getText();
      ed.autoCloseTimer = new Timer(1000, (evt) -> ed.autoCloseTick(evt));
      ed.autoCloseTimer.start();
    }

    // centraggio nello schermo
    Dimension dlgSize = ed.getSize();
    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    ed.setLocation((screenSize.width - dlgSize.width) / 2, (screenSize.height - dlgSize.height) / 2);
    ed.setVisible(true);
    return ed.rv;
  }

  public static int showError(String msg, Throwable t)
  {
    return showError(null, msg, t);
  }

  public static int showError(Container parent, String msg, Throwable t)
  {
    return showError(parent, msg, t, true, false);
  }

  public static int showError(Container parent, String msg, Throwable t,
     boolean showContinue, boolean showInterrupt)
  {
    return showError(parent, msg, t, showContinue, showInterrupt, 0);
  }

  public static int showError(Throwable t)
  {
    return showError(null, t.getMessage(), t);
  }

  public static int showError(Container parent, Throwable t)
  {
    return showError(parent, t.getMessage(), t);
  }

  public static void showAbort(Container parent, String msg, Throwable t)
  {
    ErrorDialog ed = createDialog(parent);
    CharArrayWriter cw = new CharArrayWriter();
    PrintWriter pw = new PrintWriter(cw, true);
    t.printStackTrace(pw);
    t.printStackTrace();

    ed.jtStack.setText(cw.toString());
    ed.jtError.setText(msg);
    ed.setSize(800, 400);
    ed.jtStack.setCaretPosition(0);

    ed.jbContinue.setVisible(false);
    ed.jbInterrupt.setVisible(true);

    ed.jlContinua.setText("L'applicazione non può continuare.");
    ed.jbInterrupt.setText("Esci dall'applicazione");

    // centraggio nello schermo
    Dimension dlgSize = ed.getSize();
    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    ed.setLocation((screenSize.width - dlgSize.width) / 2, (screenSize.height - dlgSize.height) / 2);
    ed.setVisible(true);
    System.exit(-1);
  }

  public static void showAbort(String msg, Throwable t)
  {
    showAbort(null, msg, t);
  }

  public static void showAbort(Throwable t)
  {
    showAbort(null, t.getMessage(), t);
  }

  public static void showAbort(Container parent, Throwable t)
  {
    showAbort(parent, t.getMessage(), t);
  }
}
